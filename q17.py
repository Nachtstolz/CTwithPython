# P. 344 # DFS/BFS # 교재 참고 # 성공
# Q17. 경쟁적 전염

# NxN 크기의 시험관이 있다. 시험관의 크기는 1x1 크기의 칸으로 나누어지며, 특정 위치에는
# 바이러스가 존재할 수 있다. 바이러스의 종류는 1~K번까지 K가지가 있으며 모든 바이러스는 이 중 하나에 속한다.
# 시험관에 존재하는 모든 바이러스는 1초마다 상, 하, 좌, 우 방향으로 증식하는데 매초 번호가 낮은 종류의 바이러스부터
# 먼저 증식함. 또한 증식 과정에서 특정 칸에 이미 어떠한 바이러스가 있다면 그곳엔 다른 바이러스 못 들어감.
# 시험관의 크기와 바이러스 위치 정보가 주어졌을 때 S초가 지난 후 (X,Y)에 존재하는 바이러스 종류를 출력하라.
# 만약 S초가 지난 후 해당 위치에 바이러스가 존재하지 않는다면 0을 출력하라.
# X, Y는 각각 행과 열의 위치를 의미하고 시험관의 가장 왼쪽 위에 해당하는 곳은 (1,1)에 해당한다.

# 첫째 줄에 자연수 N, K가 주어지며 각 자연수는 공백 구분한다(1<=N<=200, 1<=K<=1000)
# 둘째 줄부터 N개의 줄에 걸쳐 시험관의 정보가 주어진다. 각 행은 N개의 원소로 구성, 해당 위치에 존재하는 바이러스 번호가
# 주어지며 공백 구분한다. 단, 해당 위치에 바이러스가 존재하지 않는 경우 0이 주어진다. 모든 바이러스 번호는 K 이하 자연수다.
# N+2번째 줄에는 S, X, Y가 주어지며 공백 구분한다(0<=S<=10,000 1<=X,Y<=N)

# S초 뒤 (X,Y)에 존재하는 바이러스 종류를 출력한다. 만약 S초 뒤에 해당 위치에 바이러스가 존재하지 않으면 0 출력.

from collections import deque

virus = []
n, k = map(int, input().split())
arr = []
for i in range(n) :
    tmp = list(map(int, input().split()))
    arr.append(tmp)
    # ⭐️ 교재 참고 부분
    # 처음에 바이러스 위치 파악 -> 저장하는 방법 노가다로 생각했음 -> 교재 참고함
    for j in range(n) : # 처음 만들면서 바이러스 위치 파악 -> 저장
        if arr[i][j] != 0 :
            # ⭐️ 교재 참고 부분
            # 시간 값도 함께 저장하는 것 -> 참고
            # 처음에는 시간 함께 저장이 크게 필요없을 것이라 여기고 시간은 제외 저장
            # 그러나 시간을 임의 반복문으로 확인하는 방식에서 queue.popleft()를 무조건 해야하는 것이
            # 문제 발생. queue.top()이 가능했으면 굳이 시간 안넣어도 되긴 했을 듯!]
            # 검색 결과 queue[0]으로 top 값에 접근은 가능하다고...!!
            # 시간(s), 바이러스 종류, x, y값 순서대로
            virus.append((0, arr[i][j], i, j))

s, x, y = map(int, input().split())

# 배열 인덱스에 맞게 변경해준 x, y
x = x-1
y = y-1

# 상하좌우를 위한 dx, dy
dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

virus.sort()
queue = deque(virus)

def bfs(s) :
    while True :
        # print('-----------------------') # 디버깅
        obj = queue.popleft() # top 추출
        if obj[0] == s : # 원하는 시간이 나왔을 때 멈추도록.
            break
        for idx in range(0, 4) : # 상하좌우 이동하면서 전염
            nx = obj[2]+dx[idx]
            ny = obj[3]+dy[idx]
            if 0 <= nx < n and 0 <= ny < n and arr[nx][ny] == 0 :
                arr[nx][ny] = obj[1]
                queue.append((obj[0]+1, obj[1], nx, ny))
            # print(queue) # 디버깅

bfs(s)

print(arr[x][y])