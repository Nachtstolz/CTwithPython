# P.314 # 그리디 # 성공
# Q04. 만들 수 없는 금액

# 동네 편의점 주인인 동빈이는 N개의 동전을 가지고 있다. 이때 N개의 동전을 이용해
# 만들 수 없는 양의 정수 금액 중 최솟값을 구하는 프로그램을 작성하라.
# 예를 들어, N=5이고 각 동전이 각각 3원, 2원, 1원, 1원, 9원짜리 (화폐 단위) 동전이라고
# 가정하자. 이때 동빈이가 만들 수 없는 양의 정수 금액 중 최솟값은 8원이다.
# 또 다른 예시로, N=3이고 각 동전이 각각 3원, 5원, 7원짜리 (화폐 단위) 동전이라고 가정하자.
# 이때 동빈이가 만들 수 없는 양의 정수 금액 중 최솟값은 1원이다.

# 첫째 줄에는 동전의 개수를 나타내는 양의 정수 N이 주어진다. (1<=N<=1,000)
# 둘째 줄에 각 동전의 화폐 단위를 나타내는 N개의 자연수가 주어지며, 각 자연수는 공백으로 구분한다.
# 이때 각 화폐 단위는 1,000,000 이하의 자연수이다.

from itertools import combinations

# 입력 받기
n = int(input())
arr = list(map(int, input().split()))
arr.sort() # 정렬

# 입력된 값들의 최종 합 = 배열 길이로 써먹기
length = sum(arr)
# 가장 크게 나올 수 있는 값을 배열 길이로 사용하여 체크 용으로 쓸 배열 생성
# 만약 가진 수로 모든 값들을 만들 수 있을 때 가장 크게 나올 수 있는 값+1이
# 만들 수 없는 양의 정수 금액 중 최솟값이 될 것 -> length+2로 설정한 이유
tmp = [0] * (length+2)
tmp[0] = 1 # 0번 인덱스는 계속 0이므로 최후 출력을 위해 1로 설정

# 동전 하나
for i in range(n) :
    tmp[arr[i]] = 1

# 동전 두 개 이상 -> 조합 생성
for i in range(2, n) :
    combi = list(combinations(arr, i))
    for j in range(len(combi)) :
        tmp[sum(combi[j])] = 1

print(tmp.index(0))

''' 교재 풀이법 '''
# 동전에 대한 정보가 주어졌을 때, 화폐 단위를 기준으로 오름차순 정렬. 이후에 1부터 차례대로 특정 금액을
# 만들 수 있는지 확인하면 된다. 1부터 target-1까지의 모든 금액을 만들 수 있다고 가정하자. 우리는 화폐 단위가
# 작은 순서대로 동전을 확인하며, 현재 확인하는 동전을 이용해 target 금액 또한 만들 수 있는지 확인하면 된다.
# 만약 target 금액을 만들 수 있다면, target값을 업데이트하는(증가시키는) 방식을 이용한다.

# 구체적으로 현재 상태를 '1부터 target-1까지의 모든 금액을 만들 수 있는 상태'라고 보자.
# 이때 매번 target인 금액도 만들 수 있는지(현재 확인하는 동전의 단위가 target 이하인지) 체크하는 것이다.
# 만약 해당 금액을 만들 수 있다면 target의 값을 업데이트(현재 상태를 업데이트)하면 된다.

# [0] 처음에는 금액 1을 만들 수 있는지 확인하기 위해 target=1로 설정한다.
# [1] target = 1을 만족할 수 있는지 확인한다. 우리에게는 화폐 단위가 1인 동전이 있다.
# 우리는 이 동전을 이용해서 금액 1을 만들 수 있다. 이어서 target = 1+1 = 2로 업데이트를 한다.
# [2] target = 2를 만족할 수 있는지 확인한다. 우리에게는 화폐 단위가 2인 동전이 있다.
# 따라서 target = 2+2 = 4가 된다. (3까지의 모든 금액을 만들 수 있다는 말과 같다)
# [3] target = 4를 만족할 수 있는지 확인한다. 우리에게는 화폐 단위가 3인 동전이 있다.
# 따라서 target = 4+3 = 7이 된다. (6까지의 모든 금액을 만들 수 있다는 말과 같다)
# [4] target = 7를 만족할 수 있는지 확인한다. 우리에게는 이보다 큰, 화폐 단위가 8인 동전이 있다.
# 따라서 금액 7을 만드는 방법이 없다. 따라서 정답은 7이 된다.

'''
n = int(input()) 
data = list(map(int, input().split()))
data.sort()

target = 1
for x in data :
    # 만들 수 없는 금액을 찾았을 때 반복 종료
    if target < x :
        break
    target += x

# 만들 수 없는 금액 출력
print(target)
'''
# target > x 일때... 그냥 넘기는 걸로 이 값을 만들 수 있다는 판별이 가능하다는 게 신기한
# 아직은 조금 덜 이해된 알고리즘...