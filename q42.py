# P.395 # 그래프 이론 문제 # 교재 내 답안 참고
# Q42. 탑승구

# 공항에는 G개의 탑승구가 있고 각각의 탑승구는 1~G번까지의 번호로 구분된다.
# 공항에는 P개의 비행기가 차례대로 도착할 예정이며, i번째 비행기를 1번부터 gi번째(1<=gi<=G) 탑승구 중
# 하나에 영구적으로 도킹해야 한다. 이때, 다른 비행기가 도킹하지 않은 탑승구에만 도킹할 수 있다.
# P개의 비행기를 순서대로 도킹하다가 만약 어떠한 탑승구에도 도킹할 수 없는 비행기가 나오는 경우,
# 그 시점에서 공항 운행은 중지한다. 공항의 관리자는 최대한 많은 비행기를 공항에 도킹하고자 한다. 최대 몇 대
# 도킹할 수 있는지 출력하는 프로그램을 작성하라.

# 첫째 줄에는 탑승구의 수 G(1<=G<=100,000)가 주어진다.
# 둘째 줄에는 비행기의 수 P(1<=P<=100,000)가 주어진다.
# 다음 P개의 줄에는 각 비행기가 도킹할 수 있는 탑승구의 정보 gi(1<=gi<=G)가 주어진다.
# 이는 i번째 비행기가 1번부터 gi번째 (1<=gi<=G) 탑승구 중 하나에 도킹할 수 있다는 의미이다.

# 풀이 방법 think)
# 제일 작은 값을 갖는 비행기부터 순차적으로 도킹
# 제일 큰 값을 갖는 비행기부터 뒷 탑승구에 도킹 -> 예시에 부적합.
# 그래프 이론 4가지 방법 중에서는 결정하기 어려웠다.
# 인덱스에 하나씩 넣는 방식으로 진행해보자

# 교재 풀이 방법) 서로소 집합 알고리즘
# 비행기가 순서대로 들어오면 차례대로 도킹. 가능한 큰 번호의 탑승구로 도킹 수행.
# 이때, 도킹 과정을 탑승구 간 합집합 연산으로 이해 가능. 새롭게 비행기가 도킹되면
# 해당 집합을 바로 왼쪽에 있는 집합과 합치는 방식. 단, 집합의 루트가 0이면 더 이상 도킹 불가능.
# (해당 집합 : 이미 사용된 탑승구, 가장 왼쪽에 있는 집합 : 사용하지 않은 탑승구)

# 특정 원소가 속한 집합 찾기
def find_parent(parent, x) : 
    # 루트 노드가 아니라면, 루트 노드를 찾을 때까지 재귀 호출
    if parent[x] != x :
        parent[x] = find_parent(parent, parent[x])
    return parent[x]

# 두 원소가 속한 집합 합치기
def union_parent(parent, a, b) :
    a = find_parent(parent, a)
    b = find_parent(parent, b)
    if a < b :
        parent[b] = a
    else :
        parent[a] = b

# 탑승구의 개수 입력받기
g = int(input())
# 비행기의 개수 입력받기
p = int(input())
parent = [0] * (g+1) # 부모 테이블 초기화

# 부모 테이블에서 부모를 자기 자신으로 초기화
for i in range(1, g+1) :
    parent[i] = i

result = 0
for _ in range(p) :
    data = find_parent(parent, int(input())) # 현재 비행기의 탑승구 루트 확인
    if data == 0 : # 현재 루트가 0이라면 종료
        break
    union_parent(parent, data, data-1) # 그렇지 않다면 바로 왼쪽 집합과 합치기
    result += 1

print(result)