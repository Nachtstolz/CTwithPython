# P.329 # 구현 # 교재 참고
# Q12. 기둥과 보 설치

# https://programmers.co.kr/learn/courses/30/lessons/60061
# 이 문제는 기본 코드가 제공되므로 상기 링크를 통해 문제를 풀어야 한다.

# 빙하가 깨지면서 스노우타운에 떠내려온 죠르디는 인생 2막을 위해 주택 건축사업에 뛰어들기로 결심했다.
# 죠르디는 기둥과 보를 이용하여 벽면 구조물을 자동으로 세우는 로봇을 개발할 계획인데, 그에 앞서 로봇의 동작을 시뮬레이션 할 수
# 있는 프로그램을 만들고 있다. 프로그램은 2차원 가상 벽면에 기둥과 보를 이용한 구조물을 설치할 수 있는데
# 기둥과 보는 길이가 1인 선분으로 표현되며 다음과 같은 규칙을 가지고 있다.
# - 기둥은 바닥 위에 있거나 보의 한쪽 끝부분 위에 있거나, 또는 다른 기둥 위에 있어야 합니다.
# - 보는 한쪽 끝부분이 기둥 위에 있거나, 또는 양쪽 끝부분이 다른 보와 동시에 연결되어 있어야 합니다.
# 단, 바닥은 벽면의 맨 아래 지면을 이야기합니다.
# 2차원 벽면은 n x n 크기 정사각 격자 형태이며, 각 격자는 1x1 크기이다. 맨 처음 벽면은 비어있는 상태이다.
# 기둥과 보는 격자 선의 교차점에 걸치지 않고, 격자 칸의 각 변에 일치하도록 설치할 수 있다.
# 기둥과 보를 삭제하는 기능도 있는데, 기둥과 보를 삭제한 후에 남은 기둥과 보 또한 위 규칙을 만족해야 한다.
# 만약, 작업을 수행한 결과가 조건을 만족하지 않으면 해당 작업은 무시된다.

# 벽면의 크기 n, 기둥과 보를 설치하거나 삭제하는 작업이 순서대로 담긴 2차원 배열 build_frame이 매개변수로 주어질 때,
# 모든 명령어를 수행한 후 구조물의 상태를 return하도록 solution 함수를 완성하라.

# n은 5 이상 100 이하의 자연수
# build_frame의 세로(행) 길이는 1 이상 1,000 이하, 가로(열) 길이는 4
# build_frame의 원소는 [x, y, a, b] 형태이다.
#   - x, y는 기둥, 보를 설치 또는 삭제할 교차점의 좌표이며, [가로 좌표, 세로 좌표] 형태이다.
#   - a는 설치 또는 삭제할 구조물의 종류를 나타내며, 0은 기둥 1은 보를 나타낸다.
#   - b는 구조물을 설치할 지, 혹은 삭제할 지를 나타내며 0은 삭제 1은 설치를 나타낸다.
#   - 벽면을 벗어나게 기둥, 보를 설치하는 경우는 없다.
#   - 바닥에 보를 설치하는 경우는 없다.

# 구조물은 교차점 좌표를 기준으로 보는 오른쪽, 기둥은 위쪽 방향으로 설치 또는 삭제한다.
# 구조물이 겹치도록 설치하는 경우와 없는 구조물을 삭제하는 경우는 입력으로 주어지지 않는다.
# 최종 구조물의 상태는 아래 규칙에 맞춰 return하라. 
#   - return 하는 배열은 가로(열) 길이가 3인 2차원 배열로, 각 구조물의 좌표를 담고 있어야 한다.
#   - return 하는 배열의 원소는 [x, y, a]형식이다.
#   - x, y는 기둥, 보의 교차점 좌표이며, [가로 좌표, 세로 좌표] 형태이다.
#   - 기둥, 보는 교차점 좌표를 기준으로 오른쪽, 또는 위쪽 방향으로 설치되어 있음을 나타낸다.
#   - a는 구조물의 종류를 나타내며, 0은 기둥 1은 보를 나타낸다.
#   - return 배열은 x 좌표 기준으로 오름차순 정렬하며, x 좌표가 같을 경우 y 좌표 기준 오름차순 정렬하라.
#   - x, y 좌표가 모두 같은 경우 기둥이 보보다 앞에 와야 한다.

# 전형적인 시뮬레이션 문제 -> 구현이 복잡하기에 아이디어 잘 정리 후 작성
# 전체 명령의 개수 1,000개 이하. 시간 복잡도 O(M2)으로 해결하는 것이 이상적이나 O(M3)의 알고리즘 사용해도 정답 가능.
# O(M3) : 설치 및 삭제 연산 요구할 때마다 일일이 '전체 구조물 확인하며' 규칙 확인.
''' 교재 풀이 방식 '''
# 현재 설치된 구조물이 '가능한' 구조물인지 확인하는 함수
def possible(answer) :
    for x, y, stuff in answer :
        if stuff == 0 : # 설치된 것이 '기둥'인 경우
            # '바닥 위' 혹은 '보의 한쪽 끝부분 위' 혹은 '다른 기둥 위'라면 정상
            if y == 0 or [x-1, y, 1] in answer or [x, y, 1] in answer or [x, y-1, 0] in answer :
                continue
            return False # 아니라면 거짓(False) 반환
        elif stuff == 1 : # 설치된 것이 '보'인 경우
            # '한쪽 끝부분이 기둥 위' 혹은 '양쪽 끝부분이 다른 보와 동시에 연결'이라면 정상
            if [x, y-1, 0] in answer or [x+1, y-1, 0] in answer or ([x-1, y, 1] in answer and [x+1, y, 1] in answer) :
                continue
            return False # 아니라면 거짓(False) 반환
        return True

def solution(n, build_frame) :
    answer = []
    for frame in build_frame : # 작업(frame)의 개수는 최대 1,000개
        x, y, stuff, operate = frame
        if operate == 0 : # 삭제하는 경우
            answer.remove([x, y, stuff]) # 일단 삭제를 해본 뒤에
            if not possible(answer) : # 가능한 구조물인지 확인
                answer.append([x, y, stuff]) # 가능한 구조물이 아니라면 다시 설치

        if operate == 1 : # 설치하는 경우
            answer.append([x, y, stuff]) # 일단 설치를 해본 뒤에
            if not possible(answer) : # 가능한 구조물인지 확인
                answer.remove([x, y, stuff]) # 가능한 구조물이 아니라면 다시 제거

    return sorted(answer) # 정렬된 결과 반환


''' 나의 풀이 진행 - 진행 도중 난관이 있어서(보-기둥 동시에 있는 경우) 코딩 멈춤 '''
'''
def solution(n, build_frame) :
    answer = [[]]

    graph = [[0] * n for _ in range(n)]
    # print(graph)

    length = len(build_frame)
    for each in range(length) : # 들어오는 형식 : [x, y, a, b]
        x, y, a, b = build_frame[each]
        # print(each, x, y, a, b)

        # 1. 좌표 유효성 확인
        # 벽면에서 벗어나게 설치하는 경우
        if x<0 or x>n or y<0 or y>=n : 
            continue

        # 2. 기둥 / 보 확인
        # 보이면서 바닥에 설치하는 경우
        if y == 0 and a == 1 :
            continue

        # 3. 설치 / 삭제 확인
        # 설치일 때 규칙 확인하기
        if b == 1 :
            # 기둥 설치 시
            if a == 0 :
                # 바닥 위에 있거나 / 보의 한쪽 끝부분 위 / 다른 기둥 위
                if x == 0 or (x >= 1 and graph[x-1][y] == 2) or (y >= 1 and graph[x][y-1] >= 1) :
                    graph[x][y] += 1 
                else :
                    continue
            # 보 설치 시
            else :
                # 한쪽 끝 부분이 기둥 위 / 양쪽 끝부분이 다른 보와 동시 연결
                if (y >=1 and graph[x][y-1] == 1) or (y>=1 and x<n and graph[x+1][y-1] == 1) :
                    graph[x][y] += 2
                elif 1<=x<n and graph[x-1][y] == 2 and graph[x+1][y] == 2 :
                    graph[x][y] += 2

                # 기둥과 보가 다 연결된 3일 때
                elif


        # 삭제일 때 규칙 확인하기
        else :

    return answer

solution(5, [[1, 0, 0, 1], [1, 1, 1, 1], [2, 1, 0, 1], [2, 2, 1, 1], [5, 0, 0, 1], [5, 1, 0, 1],
             [4, 2, 1, 1], [3, 2, 1, 1]])
'''