# P.303
# 4. 커리큘럼

# 동빈이는 온라인으로 컴퓨터공학 강의를 듣고 있다. 각 온라인 강의는 선수 강의가 있을 수 있고
# 선수 강의가 있는 강의는 선수 강의를 먼저 들어야 해당 강의를 들을 수 있다.
# 동빈이는 총 N개의 강의를 듣고자 한다. 모든 강의는 1번부터 N번까지 번호를 가진다.
# 동시에 여러 강의를 들을 수 있다고 가정하고, N=3일때, 3번 강의의 선수 강의로 1,2 강의가 있고
# 1,2 강의는 선수 강의가 없다고 가정하자. 그리고 각 강의 시간이 다음과 같다고 가정하자.
# 1번 강의 : 30시간 / 2번 강의 : 20시간 / 3번 강의 : 40시간
# 이 경우 1번 강의 수강까지 최소 시간 30시간, 2번 강의 수강까지 최소시간 20시간,
# 3번 강의 수강까지 최소 시간 70시간이다.
# 동빈이가 듣고자 하는 N개의 강의 정보가 주어졌을 때, N개의 강의에 대해 수강하기까지 걸리는
# 최소 시간을 각각 출력하는 프로그램을 작성하시오.

# 첫째 줄에 동빈이 듣고자 하는 강의 수 N(1<=N<=500)이 주어진다.
# 다음 N개의 줄에는 각 강의의 강의 시간, 강의를 듣기 위해 먼저 들어야 하는 강의 번호가 자연수로 주어지며
# 각 자연수는 공백으로 구분한다. 이때 강의 시간은 100,000 이하의 자연수이다.
# 각 강의 번호는 1~N까지로 구성되며 각 줄은 -1로 끝난다.

# N개의 강의에 대해 수강하기까지 최소 시간을 한 줄에 하나씩 출력한다.

# 내 방식대로 풀이. DP Bottom up 느낌으로.
n = int(input())
arr = [0] * (n+1)
for i in range(1, n+1) :
    tmp = list(map(int, input().split()))
    #print(tmp, len(tmp))
    if len(tmp) == 2 : # 10 -1 의 경우 10 값 저장
        arr[i] = tmp[0]
        print(arr[i])
        continue

    maxi = 0
    for j in range(1, len(tmp)) :
        if tmp[j] == -1 : # -1이 나오면 값 저장 후 다음줄에서 또 입력받기
            arr[i] = maxi + tmp[0]
            continue
        maxi = max(maxi, arr[tmp[j]])    
    print(arr[i])