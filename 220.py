# P.220 # DP # 성공!
# 3. 개미 전사

# 개미 전사는 메뚜기 마을의 식량창고를 몰래 공격하려고 한다. 메뚜기 마을의 여러 식량창고는 일직선으로 이어져 있다.
# 각 식량 창고에는 정해진 수의 식량을 저장하고 있으며 개미 전사는 선택적으로 약탈해서 식량을 뺏을 것이다.
# 이때 메뚜기 정찰병들은 일직선상 식량창고 중 서로 인접한 식량창고가 공격받으면 알아챌 수 있다.
# 따라서, 개미 전사는 최소한 한 칸 이상 떨어진 식량창고를 약탈해야 한다. 개미 전사는 최대한 많은 식량을 얻길 원한다.
# 식량창고 N개에 대한 정보가 주어졌을 때 얻을 수 있는 식량 최댓값을 구하는 프로그램을 작성하시오.

# 첫째 줄에 식량창고의 개수 N이 주어진다. (3<=N<=100)
# 둘째 줄에 공백으로 구분되어 각 식량창고에 저장된 식량 개수 K가 주어진다. (0<=K<=1,000)

n = int(input())
li = list(map(int, input().split(' ')))

dp = [0] * n
for i in range(n) :
    for j in range(i-1) :
        dp[i] = max(dp[j], dp[i])
    dp[i] += li[i]

print(max(dp))

''' 교재 풀이 방식 '''
# 1. i-1 번째 식량창고를 털기로 결정하면, 현재(i) 식량창고를 털 수 없음
# 2. i-2 번째 식량창고를 털기로 결정하면, 현재(i) 식량창고를 털 수 있음
# 왼쪽부터 i-3 번째 이하의 식량창고에 대해서는 고려할 필요 X -> 한 칸 이상 떨어진 식량창고는 항상 털 수 있어서

'''
# 정수 N 입력받기
n = int(input())
# 모든 식량 정보 입력받기
array = list(map(int, input().split()))

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 100

# DP 진행 (보텀업)
d[0] = array[0]
d[1] = max(array[0], array[1])
for i in range(2, n) :
    d[i] = max(d[i-1], d[i-2] + array[i])

print(d[n-1])
'''